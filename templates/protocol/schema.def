>schema:{{= s.replace(/(?<=.)([A-Z][a-z])/g, '-$&').toLowerCase() }}
{{ var origSchema = data.components.schemas[s]; }}
{{ var schema = data.api.components.schemas[s]; }}
{{ var enums = []; }}
{{ var blocks = data.utils.schemaToArray(origSchema,-1,{trim:true,join:true},data); }}
{{ for (var block of blocks) {
    for (var p of block.rows) {
    if (p.schema && p.schema.enum) {
        for (var e of p.schema.enum) {
        enums.push({name:p.name,value:e});
        }
    }
    }
}
}}

{{~ blocks :block}}
{{ blacklistedBlock = ['anyOf', 'allOf', 'oneOf', 'and', 'or', 'xor', 'not'].includes(block.title); }}
{{? !blacklistedBlock }}
---

## {{? block.title }}{{= block.title}} Model{{?}}
<Row>
    <Col>
{{?}}
    {{? block.externalDocs}}
    <a href="{{=block.externalDocs.url}}">{{=block.externalDocs.description||'External documentation'}}</a>
    {{?}}

    {{? block===blocks[0] }}

    ### Properties
    {{?}}

    {{#def.properties}}
    {{~}}
    {{? (blocks[0].rows.length === 0) && (blocks.length === 1) }}
    *None*
    {{?}}
    
    {{? enums.length > 0 }}
    ### Enumerated Values

    {{#def.enums }}
    {{?}}
    </Col>

    <Col>
{{? data.options.yaml }}
```yaml
{{=data.utils.yaml.stringify(data.utils.getSample(schema,data.options,{quiet:true},data.api))}}
```
{{??}}
```json
{{=data.utils.safejson(data.utils.getSample(schema,data.options,{quiet:true},data.api),null,2)}}
```
{{?}}
    </Col>
</Row>
>endschema